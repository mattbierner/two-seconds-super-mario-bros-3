"""
Split a big log file generated by the fceux tracer (http://www.fceux.com/web/help/TraceLogger.html) into files per frame

Only supports fceux logs with all extra collection options disabled
"""
import argparse
import os
import re
import sys


def parse_operation(text):
    text = re.sub(r'\-+', '', text)
    return text.strip()

def parse_line(line):
    """
    Processes lines of the form:
    
        f1772    $96FD:10 FC     BPL $96FB
    
    """
    if not re.match(r'^f\d+\s', line):
        return None
    
    parts = re.split(r'[ ][ ]+', line)
    line_number = int(parts[0][1:])
    address = parts[1].split(':')[0].strip()
    instruction = parse_operation(parts[2].strip())
    return {
        "line_number": line_number,
        "address": address,
        "instruction": instruction
    }

def format_line(line):
    return '{address}   {instruction}'.format(**line)

def process_file(in_file, out_dir):
    current_line = -1
    current_file = None
    with open(in_file, 'r') as f:
        for line in f:
            line_data = parse_line(line)
            if not line_data:
                continue
            
            line_number = line_data['line_number']
            if line_number != current_line:
                current_line = line_number
                if current_file:
                    current_file.close()
                current_file = open(os.path.join(out_dir, '{0}.log'.format(line_number)), 'w')
                
            current_file.write(format_line(line_data) + '\n')

    if current_file:
        current_file.close()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Split a big log file generated by the fceux tracer (http://www.fceux.com/web/help/TraceLogger.html) into files per frame")
    parser.add_argument('--trace-file', dest='in_file', required=True, help="Path to input fceux log file")
    parser.add_argument('--out-dir', dest='out_dir', required=True, help="Path to write frame data to. Frames are writen as `x.log` where `x` is the frame number")

    args = parser.parse_args()

    os.makedirs(args.out_dir, exist_ok=True)
    process_file(args.in_file, args.out_dir)
